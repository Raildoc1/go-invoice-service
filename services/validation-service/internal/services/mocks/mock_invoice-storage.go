// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/invoice-storage.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/invoice-storage.go -destination=./internal/services/mocks/mock_invoice-storage.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	validation "go-invoice-service/common/protocol/proto/validation"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockInvoiceStorageClient is a mock of InvoiceStorageClient interface.
type MockInvoiceStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceStorageClientMockRecorder
	isgomock struct{}
}

// MockInvoiceStorageClientMockRecorder is the mock recorder for MockInvoiceStorageClient.
type MockInvoiceStorageClientMockRecorder struct {
	mock *MockInvoiceStorageClient
}

// NewMockInvoiceStorageClient creates a new mock instance.
func NewMockInvoiceStorageClient(ctrl *gomock.Controller) *MockInvoiceStorageClient {
	mock := &MockInvoiceStorageClient{ctrl: ctrl}
	mock.recorder = &MockInvoiceStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceStorageClient) EXPECT() *MockInvoiceStorageClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockInvoiceStorageClient) Get(ctx context.Context, in *validation.GetInvoiceRequest, opts ...grpc.CallOption) (*validation.GetInvoiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*validation.GetInvoiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInvoiceStorageClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInvoiceStorageClient)(nil).Get), varargs...)
}

// SetApproved mocks base method.
func (m *MockInvoiceStorageClient) SetApproved(ctx context.Context, in *validation.SetApprovedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetApproved", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetApproved indicates an expected call of SetApproved.
func (mr *MockInvoiceStorageClientMockRecorder) SetApproved(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApproved", reflect.TypeOf((*MockInvoiceStorageClient)(nil).SetApproved), varargs...)
}

// SetRejected mocks base method.
func (m *MockInvoiceStorageClient) SetRejected(ctx context.Context, in *validation.SetRejectedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetRejected", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRejected indicates an expected call of SetRejected.
func (mr *MockInvoiceStorageClientMockRecorder) SetRejected(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRejected", reflect.TypeOf((*MockInvoiceStorageClient)(nil).SetRejected), varargs...)
}

// MockInvoicesMetrics is a mock of InvoicesMetrics interface.
type MockInvoicesMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockInvoicesMetricsMockRecorder
	isgomock struct{}
}

// MockInvoicesMetricsMockRecorder is the mock recorder for MockInvoicesMetrics.
type MockInvoicesMetricsMockRecorder struct {
	mock *MockInvoicesMetrics
}

// NewMockInvoicesMetrics creates a new mock instance.
func NewMockInvoicesMetrics(ctrl *gomock.Controller) *MockInvoicesMetrics {
	mock := &MockInvoicesMetrics{ctrl: ctrl}
	mock.recorder = &MockInvoicesMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoicesMetrics) EXPECT() *MockInvoicesMetricsMockRecorder {
	return m.recorder
}

// IncTotalHandledInvoices mocks base method.
func (m *MockInvoicesMetrics) IncTotalHandledInvoices(ctx context.Context, status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncTotalHandledInvoices", ctx, status)
}

// IncTotalHandledInvoices indicates an expected call of IncTotalHandledInvoices.
func (mr *MockInvoicesMetricsMockRecorder) IncTotalHandledInvoices(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncTotalHandledInvoices", reflect.TypeOf((*MockInvoicesMetrics)(nil).IncTotalHandledInvoices), ctx, status)
}
