// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: validation/storage.proto

package validation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InvoiceStorage_Get_FullMethodName         = "/protocol.validation.storage.InvoiceStorage/Get"
	InvoiceStorage_SetApproved_FullMethodName = "/protocol.validation.storage.InvoiceStorage/SetApproved"
	InvoiceStorage_SetRejected_FullMethodName = "/protocol.validation.storage.InvoiceStorage/SetRejected"
)

// InvoiceStorageClient is the client API for InvoiceStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoiceStorageClient interface {
	Get(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error)
	SetApproved(ctx context.Context, in *SetApprovedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetRejected(ctx context.Context, in *SetRejectedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type invoiceStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceStorageClient(cc grpc.ClientConnInterface) InvoiceStorageClient {
	return &invoiceStorageClient{cc}
}

func (c *invoiceStorageClient) Get(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceStorage_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceStorageClient) SetApproved(ctx context.Context, in *SetApprovedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InvoiceStorage_SetApproved_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceStorageClient) SetRejected(ctx context.Context, in *SetRejectedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InvoiceStorage_SetRejected_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceStorageServer is the server API for InvoiceStorage service.
// All implementations must embed UnimplementedInvoiceStorageServer
// for forward compatibility.
type InvoiceStorageServer interface {
	Get(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error)
	SetApproved(context.Context, *SetApprovedRequest) (*emptypb.Empty, error)
	SetRejected(context.Context, *SetRejectedRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedInvoiceStorageServer()
}

// UnimplementedInvoiceStorageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInvoiceStorageServer struct{}

func (UnimplementedInvoiceStorageServer) Get(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedInvoiceStorageServer) SetApproved(context.Context, *SetApprovedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApproved not implemented")
}
func (UnimplementedInvoiceStorageServer) SetRejected(context.Context, *SetRejectedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRejected not implemented")
}
func (UnimplementedInvoiceStorageServer) mustEmbedUnimplementedInvoiceStorageServer() {}
func (UnimplementedInvoiceStorageServer) testEmbeddedByValue()                        {}

// UnsafeInvoiceStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceStorageServer will
// result in compilation errors.
type UnsafeInvoiceStorageServer interface {
	mustEmbedUnimplementedInvoiceStorageServer()
}

func RegisterInvoiceStorageServer(s grpc.ServiceRegistrar, srv InvoiceStorageServer) {
	// If the following call pancis, it indicates UnimplementedInvoiceStorageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InvoiceStorage_ServiceDesc, srv)
}

func _InvoiceStorage_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceStorageServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceStorage_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceStorageServer).Get(ctx, req.(*GetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceStorage_SetApproved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApprovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceStorageServer).SetApproved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceStorage_SetApproved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceStorageServer).SetApproved(ctx, req.(*SetApprovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceStorage_SetRejected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRejectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceStorageServer).SetRejected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceStorage_SetRejected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceStorageServer).SetRejected(ctx, req.(*SetRejectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoiceStorage_ServiceDesc is the grpc.ServiceDesc for InvoiceStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoiceStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.validation.storage.InvoiceStorage",
	HandlerType: (*InvoiceStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _InvoiceStorage_Get_Handler,
		},
		{
			MethodName: "SetApproved",
			Handler:    _InvoiceStorage_SetApproved_Handler,
		},
		{
			MethodName: "SetRejected",
			Handler:    _InvoiceStorage_SetRejected_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validation/storage.proto",
}
